{"version":3,"sources":["components/player.js","components/search.js","App.js","serviceWorker.js","index.js"],"names":["Player","this","props","error","react_default","a","createElement","className","value","Fragment","height","width","src","image","alt","result","description","React","Component","Search","onSubmit","submit","type","onChange","change","loading","Module","_this","Object","classCallCheck","_super","call","getInfo","vars","state","setState","Axios","get","concat","then","weather","data","icon","isLoaded","catch","console","log","handleChange","bind","assertThisInitialized","handleSubmit","event","target","preventDefault","search","player","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9bcbe99.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Player extends React.Component {\r\n    render() {\r\n        if (this.props.error != null) {\r\n            return (\r\n                <div className=\"player\">\r\n                    <h5 className=\"text-center pname\" >{this.props.value}</h5>\r\n                    <p className=\"text-center bowlstyle\">not found  </p>\r\n                </div>\r\n            )\r\n\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"player\">\r\n                    {this.props.value ? <>\r\n                        <h5 className=\"text-center text-capitalize text-lg pname\" >{this.props.value}</h5>\r\n                        <img className=\"picture\" height=\"50\" width=\"50\" src={this.props.image} alt=\"\"></img>\r\n                        <p className=\"text-center text-capitalize bowlstyle\">{this.props.result.description} </p>\r\n                    </>\r\n                        : <h4 className=\"text-center\">----</h4>\r\n                    }\r\n                </div>\r\n\r\n\r\n\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import React from 'react';\r\nclass Search extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"search\">\r\n            <div className=\"col\">\r\n            <h4 className=\"text-center\"> WEATHER SEARCH</h4>\r\n            <label>Enter city name</label>\r\n            <form onSubmit={this.props.submit}>\r\n               <input className=\"hello form-control\"  type=\"text\"  value={this.props.value} onChange={this.props.change}></input> <br/>\r\n               <button type=\"submit\" className=\"btn btn-primary btn-block\">{this.props.loading?'---':\"Submit\"}</button>\r\n              </form>\r\n</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Player from './components/player';\r\nimport Search from './components/search';\r\nimport Axios from 'axios';\r\n\r\nclass Module extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: '',\r\n      submit: '',\r\n      weather: [],\r\n      isLoaded: false,\r\n      loading: false,\r\n      error: null,\r\n      image: ''\r\n\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n\r\n  }\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({ submit: this.state.value });\r\n    this.getInfo();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoaded: false})\r\n}\r\n  getInfo = () => {\r\n    const vars = this.state.value;\r\n    this.setState({loading: true})\r\n\r\n    Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${vars}&appid=8bcaee364dd25e6ab4318dce38808245`)\r\n      .then(result => this.setState({\r\n        weather: result.data.weather[0],\r\n        image:`http://openweathermap.org/img/w/${result.data.weather[0].icon}.png`,\r\n        isLoaded: true,\r\n        loading: false,\r\n        error:null\r\n\r\n      }))\r\n      .catch(error => this.setState({ error, isLoaded: true }));\r\n      \r\n    console.log(this.state.weather);\r\n    console.log(this.state.error);\r\n\r\n  }\r\n  \r\n  render() {\r\n    const loadiing = 'loading';\r\n    return <div className=\"bg-blue\">\r\n      <Search value={this.state.value} loading={this.state.loading} change={this.handleChange} submit={this.handleSubmit} />\r\n\r\n     \r\n\r\n      {this.state.isLoaded ? <Player value={this.state.submit} image={this.state.image} result={this.state.weather} loading={this.state.isLoaded} error={this.state.error} /> : <Player result={loadiing}/>} </div>\r\n  }\r\n}\r\n\r\n\r\nexport default Module;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}